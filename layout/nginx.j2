{# nginx configuration to be included at the "server" level #}
index         index.html;
error_page    404 {{content_url('/en/404.html')}};
add_header    "X-Content-Type-Options" "nosniff";
add_header    "Strict-Transport-Security" "max-age=31557600; includeSubDomains; preload";
add_header    "Referrer-Policy" "no-referrer-when-downgrade";
add_header    "Content-Security-Policy" "{% filter striptags %}
   default-src 'self' blob:;
   script-src  'self' blob: 
               {{ media_url('js/') }};
   object-src  'self' {{ media_url('images/') }};
   img-src     'self' data:
               {{ media_url('images/') }};
   frame-src   {{ media_url('images/') }};
   style-src   'self' 'unsafe-inline'
               {{ media_url('css/') }};
   font-src    'self' about: data: {{ media_url('fonts/') }};
   worker-src  blob:;
   media-src   'self' blob: about:
               {{ media_url('videos/') }}
               {{ media_url('images/') }};
   connect-src 'self'
               {{ media_url('videos/') }}
               https://comments.luffy.cx;

   frame-ancestors 'none';
   block-all-mixed-content;
{% endfilter %}";

location = /nginx.conf {
  expires     max;
  return      404;
}

{# language selection, a more correct alternative would be:
   https://www.nginx.com/resources/wiki/modules/accept_language/ #}
{% for code, lang in languages %}
location /{{code}} {
  error_page 404 {{content_url('/' + code + '/404.html')}};
  try_files $uri.html $uri $uri/index.html =404;
}
location {{content_url('/' + code + '/404.html')}} {
  internal;
  try_files $uri.html $uri;
}
{% endfor %}
location = / {
  access_log off;
  log_not_found off;
  set_by_lua_block $lang {
    local supported = { {% for code, lang in languages %}{{ code }}{% if not loop.last %}, {% endif %}{% endfor %} }
    if (ngx.var.http_accept_language == nil) then
      return "en"
    end
    local cleaned = ngx.re.sub(ngx.var.http_accept_language, "^.*:", "")
    local options = {}
    local iterator, err = ngx.re.gmatch(cleaned, "\\s*([a-z]+(?:-[a-z])*)\\s*(?:;q=([0-9]+(.[0-9]*)?))?\\s*(,|$)", "i")
    for m, err in iterator do
        local lang = m[1]
        local priority = 1
        if m[2] ~= nil then
            priority = tonumber(m[2])
            if priority == nil then
            priority = 1
            end
        end
        table.insert(options, {lang, priority})
    end
    
    table.sort(options, function(a,b) return b[2] < a[2] end)
    
    for index, lang in pairs(options) do
        for key, value in pairs(supported) do
           if value == lang[1] then
             return lang[1]
           end
        end
    end
    
    return "en"
  };
  add_header  Vary Accept-Language;
  add_header  "Strict-Transport-Security" "max-age=31557600; includeSubDomains; preload";
  http2_push  /$lang;
  return 301  /$lang;
}

location / {
  try_files $uri.html $uri $uri/index.html =404;
}

{# redirections #}
location = /favicon.ico {
  access_log off;
  return 301 {{ media_url('images/favicon.ico') }};
}
location = /favicon.png {
  access_log off;
  return 301 {{ media_url('images/favicon.png') }};
}
location = /apple-touch-icon.png {
  access_log off;
  return 301 {{ media_url('images/favicon.png') }};
}
location ~ ^/apple-touch-icon-\d+x\d+.png$ {
  access_log off;
  return 301 {{ media_url('images/favicon.png') }};
}
location = /apple-touch-icon-precomposed.png {
  access_log off;
  log_not_found off;
  return 404;
}
location ~ ^(?<canonical>.+)/(?:index\.html)?$ {
  access_log off;
  log_not_found off;
  http2_push $canonical;
  return 301 $canonical;
}
location ~ ^(?<canonical>.*)\.html$ {
  access_log off;
  log_not_found off;
  http2_push $canonical;
  return 301 $canonical;
}

{% for res in resource.node.walk_resources() %}
{# handle exceptions #}
{% if res.meta.nolog or res.meta.mime %}
location = {{ content_url(res.url) }} {
{% if res.meta.nolog %}
  access_log off;
  log_not_found off;
{% endif %}
{% if res.meta.mime %}
  types { }
  default_type {{ res.meta.mime }};
{% endif %}
  try_files $uri.html $uri $uri/index.html;
}
{% endif %}
{% endfor %}

{# Misc #}
location /ip {
  default_type text/plain;
  return 200 $remote_addr;
}
